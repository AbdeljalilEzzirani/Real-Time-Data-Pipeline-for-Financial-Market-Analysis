version: '3.8'

services:
  # Zookeeper for Kafka
  # Kafka + Zookeeper: Hada 3ndk mn l-projet l-qdim, o ghadi nsta3mlu.
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    hostname: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/data
      - zookeeper_logs:/datalog
    networks:
      - project_network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    hostname: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - project_network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "kafka:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # Kafka Topic Setup
  kafka-topic-setup:
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      kafka:
        condition: service_healthy
    command: >
      bash -c "
        echo 'Waiting for Kafka to be ready...'
        cub kafka-ready -b kafka:9092 1 60
        echo 'Creating topics...'
        kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --topic financial_data --partitions 1 --replication-factor 1
        echo 'Topics created!'
      "
    networks:
      - project_network

  # Kafka UI
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8081:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: dataco-kafka
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      kafka:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
    networks:
      - project_network
    restart: unless-stopped

  # Finnhub Producer
  # Finnhub Producer: Ghadi ndiru chi service li yjma3 l-m3lumat mn Finnhub o yb3athha l-Kafka.
  finnhub-producer:
    build:
      context: ./finnhub-producer
      dockerfile: Dockerfile
    container_name: finnhub-producer
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      FINNHUB_API_TOKEN: "d03856hr01qvvb92q90gd03856hr01qvvb92q910"
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    networks:
      - project_network
    restart: unless-stopped

  # Spark Structured Streaming
  # Spark: Ghadi nsetupiw Spark Structured Streaming bash y7awwl l-m3lumat.
  spark:
    build:
      context: ./spark
      dockerfile: Dockerfile
    container_name: spark
    depends_on:
      kafka:
        condition: service_healthy
      cassandra:
        condition: service_healthy
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      CASSANDRA_HOST: cassandra
    volumes:
      - spark_checkpoint:/tmp/spark_checkpoint  # Mount checkpoint directory
    networks:
      - project_network
  
  # Cassandra
  # Cassandra: Database li t7ttha fih l-m3lumat.
  cassandra:
    image: cassandra:4.1
    container_name: cassandra
    ports:
      - "9042:9042"
    volumes:
      - cassandra_data:/var/lib/cassandra
      - ./cassandra/cassandra-setup.cql:/cassandra-setup.cql
    environment:
      CASSANDRA_CLUSTER_NAME: FinancialCluster
    networks:
      - project_network
    healthcheck:
      test: ["CMD", "cqlsh", "-e", "describe keyspaces"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # Cassandra Setup
  cassandra-setup:
    image: cassandra:4.1
    depends_on:
      cassandra:
        condition: service_healthy
    command: >
      bash -c "
        echo 'Waiting for Cassandra to be ready...'
        sleep 30
        echo 'Running setup script...'
        cqlsh cassandra -f /cassandra-setup.cql
        echo 'Setup complete!'
      "
    volumes:
      - ./cassandra/cassandra-setup.cql:/cassandra-setup.cql
    networks:
      - project_network

  # Grafana
  # Grafana: Bash tshuf l-m3lumat f-tableaux de bord.
  grafana:
    image: grafana/grafana:10.0.0
    container_name: grafana
    environment:
      GF_AUTH_ANONYMOUS_ENABLED: "true"
      GF_AUTH_ANONYMOUS_ORG_ROLE: Viewer
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      cassandra:
        condition: service_healthy
    networks:
      - project_network
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

networks:
  project_network:
    driver: bridge

volumes:
  zookeeper_data:
  zookeeper_logs:
  kafka_data:
  cassandra_data:
  grafana_data:
  spark_checkpoint: {}
